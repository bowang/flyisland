README for Final Project

Name: Haowei Zhang
      Xiaoying Shen
      Bo Wang

SUID: zhanghw
      xyshen
      bowang

===============================================================================
    1. Game Rules
===============================================================================
This is a simple but interesting airplane game. By controlling the helicopter 
to shot ballons and ships, you will have more advanced weapons. As the time 
goes on, the speed of target objects will also increase. This game has an 
infinite scene where targets, ocean and islands will generate automatically.

===============================================================================
    2. Advanced Features
===============================================================================
  - Water rendering                           [hard]
  - Very large or very detailed environments  [easy to hard]
  - Motion Blur                               [easy]
  - Depth of field                            [easy to medium]

===============================================================================
    3. Render Ocean Water
===============================================================================
Reference: Simulating Ocean Water, J. Tessendorf, SIGGRAPH 2001

In order to render ocean water in our game, we mainly deal with three problems:
  (1) Simulate ocean wave using Fast Fourier Transformation (FFT)
  (2) Simulate optical properties of ocean water
  (3) Render Infinite large ocean
We will explain them in the following three parts in Appendix(A)
  
===============================================================================
    4. Motion Blur
===============================================================================
The motion blur implemented in this game uses the accumulative framebuffer. 
Multiple frames are rendered and added into the accumulative framebuffer to 
generate a single final frame.

===============================================================================
    5. Depth of field
===============================================================================
The depth of field can be implemented in a similar way as motion blur. Instead 
of rendering multiple frames for a single frame, depth of field renders the same 
frame from several positions and accumulate these results in the buffer. In our 
implementation, we always keep the helicopter on the focus plane so that it is 
always clear.

===============================================================================
    6. INI-based Configuration
===============================================================================
To make our simple game engine easy to change, we used Windows INI format to 
configure the program. At the beginning of the game, the program parses 
config.ini to get guidance how to load the scene. These configurations include
what scenes, shaders, lights, particles, music, etc. should be loaded, as well
as parameters to initiliaze them.

===============================================================================
                          Appendix(A) Ocean rendering
===============================================================================
    ----------------------------------------------------------------------
      Part(a) Simulate ocean wave using Fast Fourier Transformation (FFT)
    ----------------------------------------------------------------------
    
It is found that to model ocean wave, using FFT to decompose ocean wave height
field is one way ballancing the detail aspect of ocean wave and calculating 
simplicity. 

In Stastical models to simulate ocean wave, wave height is considered a random
variable of horizontal position and time, h(x,t). It could also be decomposed
as sum a set of sine and cosine waves. The value of this decomposition is that
the amplitudes of the wave have nice mathemetical and statistical properties,
making it simpler to build model. Computationally, the decomposition uses FFT,
which are a rapid method of evaluating the sums.

In our game, the sample points for FFT is 128 * 128, which is able to generate 
fine detail of ocean surface. 

The normal of the ocean surface determines the optical properties of 
ocean. Using the slope of the wave height normal direction of the ocean surface 
could be expressed. The slope of the wave height, which is the differential of 
wave height, could also be generated by FFT. This is a more accurate way to
generate the normal of ocean surface than the finite difference calculation, 
and produce more fine detail of ocean surface.

In the model we use, both wave height and wave direction is controlled by the
wind. It could be seen in our demo

    ----------------------------------------------------------------------
                              Part(b) Ocean optics
    ----------------------------------------------------------------------

The optics above the surface mainly come from three parts: upwelling color from
ocean water, reflect light from skylight, reflect light from sun beam. 

The reflectivity is decided by the angle of normal, direction of indicent beam,
and direction of refracted beam. In our specific ocean shader, we ray trace the 
indicent beam from the eye and calculate the indicent angle. Using Snell's law,
the refracted angle is calculated. Then using Frensel Formula, the reflectity
is calculated with respect to indicent angle and refracted angle.

The water reflect light from the sun and sky. Theoretically, when indicent 
angle is 90.0 degree, the reflectivity is 1. Water looks white at the heighest 
point of the wave, which reflect the color of the sky most. This is consistent
with theoretical values.

    ----------------------------------------------------------------------
                        Part(c) Inifinite ocean rendering:
    ----------------------------------------------------------------------

By FFTs, we could generate a "patch" of ocean, and we tiles patches to make the
ocean looks like infinite. For every frame, we calculate how many patches 
should we render, by testing how many patches collide with the view frustum,
according to the camera position and camera direction.

We also use different detail-level ocean patches to decrease total triangles.
The farther of the patches, the less detailed model we will use.

===============================================================================
                           Appendix(B) - Control Panel
===============================================================================

Airplane
    W - Down
    S - Up
    A - Left
    D - Right
    
Camera
    Up    - Look closer
    Down  - Look further
    Left  - Look left
    Right - Look right
    
Look around
    Drag the mouse
    
Camera Mode
    C     - Free Mode   (camera does not follow the plane)
            Follow Mode (camera follows the plane)
            Fix Mode    (camera follows the plane at a fixed angle)
    
Speed
    Dash (-) - Speed up
    Equal(=) - Speed down

Fire
    Space - Fire

Motion Blur
    Left Shift - When pressed, motion blur is enabled.

Depth of Field (DOF)
    F - Press to enable/disable DOF

Move sun light
    Numpad8/2/4/6

Wave magnitude
    PageUp   - increase the magnitude
    PageDown - decrease the magnitude

Direction of Wind
    I / K / J / L

Restart
    Enter - Restart the game!

Cheat key
    Plus(+) - Increase 50 in score

===============================================================================
                           Appendix(C) - Model sources
===============================================================================
    All the models except realtime generated ocean meshes are obtained online.
    All music are obtained online.
